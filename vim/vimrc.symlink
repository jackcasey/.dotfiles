" autocmd! bufwritepost ~/.vimrc source %

if has('vim_starting')
	set nocompatible
  filetype off

  " Required:
  set runtimepath+=~/.vim/bundle/neobundle.vim/
endif

runtime macros/matchit.vim

" Neobundle all the things
call neobundle#begin(expand('~/.vim/bundle'))

" Neobundle bundle's itself
NeoBundleFetch 'Shougo/neobundle.vim'
" My Bundles here:

NeoBundle 'Shougo/vimproc.vim', {
      \ 'build' : {
      \     'windows' : 'tools\\update-dll-mingw',
      \     'cygwin' : 'make -f make_cygwin.mak',
      \     'mac' : 'make -f make_mac.mak',
      \     'unix' : 'make -f make_unix.mak',
      \    },
      \ }

NeoBundle 'Shougo/unite.vim'
NeoBundle 'Shougo/neomru.vim'
NeoBundle 'Shougo/unite-outline'
NeoBundle 'tpope/vim-fugitive.git'
NeoBundle 'tpope/vim-commentary.git'      " gcc gcap gcgc
" NeoBundle 'scrooloose/syntastic'          " Syntax checking via external tools
NeoBundle 'tpope/vim-surround' "shortcuts for accessing surrounding delimiters
NeoBundle 'kchmck/vim-coffee-script'
NeoBundle 'airblade/vim-gitgutter'
NeoBundle 'Lokaltog/vim-easymotion'
NeoBundle 'kana/vim-textobj-user'
NeoBundle 'nelstrom/vim-textobj-rubyblock'
NeoBundle 'michaeljsmith/vim-indent-object'
NeoBundle 'tpope/vim-eunuch'
NeoBundle 'tpope/vim-unimpaired.git'
NeoBundle 'tpope/vim-repeat.git'
NeoBundle 'digitaltoad/vim-jade.git'
NeoBundle 'tpope/vim-markdown'
NeoBundle 'terryma/vim-multiple-cursors'
NeoBundle 'benjaminwhite/Benokai'
NeoBundle 'DAddYE/soda.vim'
NeoBundle 'Chiel92/vim-autoformat'
NeoBundle 'mxw/vim-jsx'
NeoBundle 'pangloss/vim-javascript'
NeoBundle 'wavded/vim-stylus'
NeoBundle 'groenewege/vim-less'
NeoBundle 'godlygeek/tabular'
call neobundle#end()

" required
filetype indent plugin on

" Install uninstalled bundles on startup
NeoBundleCheck

" Basic necessities
syntax enable
set regexpengine=1  " Fix a bug with slow syntax highlighting in vim 7.4

set hidden 				  " Allow multiple files open in one window.
set wildmenu 				" Better command completion
set showcmd				  " Current command feedback on last line of terminal
set mouse=a         " All mouse functionality
set history=200    " undo history
set encoding=utf-8
set laststatus=2    " Show status bar even when only one window
set cursorline      " Highlight currently selected line
set number          " line numbers inline
set nowrap          " don't soft wrap long lines
set timeoutlen=750  " ms wait before giving up on sequenced shortcuts
set backupdir=/tmp  " Leave .tmp files tidily away in /tmp
set directory=/tmp
set scrolloff=5     " try to keep 5 lines of buffer above and below cursor
let mapleader=","

" Better tabs
set tabstop=4                  " Show tabs as 4 characters wide
set softtabstop=2              " Use 2 spaces per indent
set shiftwidth=2               " Use 2 spaces per indent
set expandtab                  " Insert spaces for tabs
set autoindent                 " Newlines will start auto indented
set smartindent                " Be smart about indenting in c-like languages
set backspace=indent,eol,start " make backspace delete always not 'locked'

" Statusline {{{
  function! GitBranch()
    let branch = fugitive#statusline()
    if branch != ''
      let branch = substitute(branch, '\n', '', 'g')
      let branch = substitute(branch, 'Git', '', 'g')
      let branch = substitute(branch, '[', '', 'g')
      let branch = substitute(branch, ']', '', 'g')
      return branch
    en
    return ''
  endfunction
  set statusline=%f\ [%{&ft}]\ %m%w\
  set statusline+=%=
  set statusline+=%{GitBranch()}
  set statusline+=\ %l:%v
" }}}

" Search
set ignorecase      " ignore case when searching etc
set smartcase       " don't ignore case when searching for uppercase characters
set hlsearch        " highlight last search results
set incsearch       " incremental search
set showmatch       " highlight matching parens
set mat=5           " Highlight matching parens for .5s
let g:EasyMotion_smartcase = 1

" Ignore patterns when globbing / autocompleting
set wildignore+=*.o,*.out,*.obj,.git,*.rbc,*.rbo,*.class,.svn,*.gem
set wildignore+=*.zip,*.tar.gz,*.tar.bz2,*.rar,*.tar.xz
set wildignore+=*/vendor/cache/*,*/.bundle/*,*/.sass-cache/*
set wildignore+=*.swp,*~,._*

" GUI Options
" Hide scrollbars
set guioptions-=r
set guioptions-=l
set guioptions-=R
set guioptions-=L
set guifont=Source\ Code\ Pro\ Light:h16'
" Change cursor to bar in insert mode
let &t_SI = "\<Esc>]50;CursorShape=1\x7"
let &t_EI = "\<Esc>]50;CursorShape=0\x7"
:autocmd InsertEnter,InsertLeave * set cul!

" use global (/g) option for substitution regexes as default
set gdefault

" Syntastic syntax checking
" let g:syntastic_ruby_checkers = ['mri']
" let g:syntastic_ignored_files = ['feature']

" Unite {{{
  call unite#filters#matcher_default#use(['matcher_fuzzy'])
  call unite#filters#sorter_default#use(['sorter_selecta'])
  " Custom mappings for the unite buffer
  autocmd FileType unite call s:unite_settings()
  function! s:unite_settings()
    " Enable navigation with control-j and control-k in insert mode
    imap <buffer> <C-j>   <Plug>(unite_select_next_line)
    imap <buffer> <C-k>   <Plug>(unite_select_previous_line)
  endfunction

  let g:unite_source_rec_async_command='ag --follow --nocolor --nogroup ' .
        \ '--hidden --ignore "node_modules" -g ""'
  let g:unite_source_grep_command='ag'
  let g:unite_source_grep_recursive_opt=''
  let g:unite_source_grep_search_word_highlight = 1
  let g:unite_source_grep_default_opts =
        \ '-i --line-numbers --nocolor --nogroup --hidden --ignore ''.hg'' ' .
        \ '--ignore ''.svn'' --ignore ''.git'' --ignore ''.bzr'' ' .
        \ '--ignore ''node_modules'''
  let g:unite_source_grep_recursive_opt = ''
  let g:unite_abbr_highlight = 1
  let g:unite_source_history_yank_enable = 1
  let g:unite_matcher_fuzzy_max_input_length = 40
" }}}

" Strip trailing whitespace
function! <SID>StripTrailingWhitespaces()
  let l = line(".")
  let c = col(".")
  %s/\s\+$//e
  call cursor(l, c)
endfunction
autocmd BufWritePre * :call <SID>StripTrailingWhitespaces()

"  ***********
"  My keybinds
"  ***********

" Edit vimrc quickly
map <leader>vr :e ~/.vimrc<cr>
augroup myvimrc
  au!
  au BufWritePost .vimrc,_vimrc,vimrc,.gvimrc,_gvimrc,gvimrc so ~/.vimrc
augroup END

" space to clear search results
nnoremap <space> :nohlsearch<esc>

" easy escape to normal mode
inoremap jk <Esc>
cnoremap jk <Esc>

" window resizing
nnoremap <C-w>a :<C-u>vert sba 2<CR>
nnoremap <silent> <Leader>= :vertical resize +25<CR>
nnoremap <silent> <Leader>- :vertical resize -25<CR>
nnoremap <silent> <Leader>+ :resize +5<CR>
nnoremap <silent> <Leader>_ :resize -5<CR>

" toggle spelling
" [s and ]s to navigate, z= to fix a mistake,zg to add to dictionary
nnoremap <leader>ss :setlocal spell! spelllang=en_au<CR>

" use tab to jump between matching pairs of brackets etc
nnoremap <tab> %
vnoremap <tab> %

" Make Y work like C and D
:map Y y$

" Buffer management
" write current buffer
nnoremap <leader>w :w<cr>
" quit
nnoremap <leader>q :q<cr>
" switch to last buffer
nnoremap <leader>bb :b#<cr>
" Unite bindings
nnoremap <c-p>a    :<C-u>Unite -buffer-name=files   -start-insert file_rec/async:!<cr>
nnoremap <c-p>p    :<C-u>Unite -buffer-name=files   -start-insert file_rec/git<cr>
nnoremap <c-P>f    :<C-u>Unite -buffer-name=fs      file<cr>
nnoremap <c-P>g    :<C-u>Unite -buffer-name=grep    grep<cr>
nnoremap <c-P>h    :tabnew<CR>:<C-u>Unite -no-split -buffer-name=grep    grep<cr>
nnoremap <c-P>r    :<C-u>Unite -buffer-name=mru     -start-insert file_mru<cr>
nnoremap <c-P>o    :<C-u>Unite -no-split -buffer-name=outline outline<cr>
nnoremap <c-P>y    :<C-u>Unite -buffer-name=yank    history/yank<cr>
nnoremap <c-P>b    :<C-u>Unite -buffer-name=buffer  -start-insert buffer<cr>
nnoremap <c-P>w    :UniteWithCursorWord grep<cr>
nnoremap <RIGHT>   :<C-u>Unite -buffer-name=buffer  buffer<cr>
nnoremap <LEFT>    :<C-u>Unite -buffer-name=mru     file_mru<cr>
" switch to previous buffer
nmap <leader>bp :bp<cr>
" switch to next buffer
nmap <leader>bn :bn<cr>
" save and close buffer
nmap <leader>bs :<C-u>w<cr>:bp<cr>:bd#<cr>
" save and close buffer
nmap <leader>bc :<C-u>bp<cr>:bd#<cr>
" kill buffer (close w/o saving)
nmap <leader>bk :<C-u>bp<cr>:bd!#<cr>
nnoremap <up> :bprev<CR>
nnoremap <down> :bnext<CR>
" Jump around with easymotion
map <C-j> <Plug>(easymotion-j)
map <C-k> <Plug>(easymotion-k)
map <leader>f <Plug>(easymotion-s)
map <C-h> <Plug>(easymotion-bd-w)
map <C-l> <Plug>(easymotion-w)

" leader yank and paste for system clipboard
noremap <leader>p "*p
noremap <leader>y "*y

" vim file explorer
nnoremap <leader>e :<C-u>Explore<cr>

" colour scheme and toggle function
function! BackgroundToggle()
  if(s:colscheme == 'light')
    colorscheme Benokai
    let s:colscheme='dark'
    hi! link SignColumn LineNr
  else
    colorscheme soda
    let s:colscheme='light'
    hi! link SignColumn LineNr
  endif
endfunc
colorscheme Benokai
let s:colscheme='dark'
" gitgutter the right color
hi! link SignColumn LineNr


function! NumberToggle()
  if(&relativenumber!)
    set number
  else
    set relativenumber
  endif
endfunc

" switch background between light and dark
nnoremap <leader>sb :call BackgroundToggle()<cr>

" toggle line numbers between absolute and relative
nnoremap <leader>sn :let [&nu, &rnu] = [&nu+&rnu==0, &nu]<cr>

set colorcolumn=+1             " Highlight column after max textwidth

" Multicursors
let g:multi_cursor_insert_maps={'j': 1}
let g:multi_cursor_normal_maps={'j': 1, 'r': 1, 'c': 1, 's': 1}

" indent and unindent like any sane editor
nnoremap <tab> >>_
nnoremap <s-tab> <<_
inoremap <s-tab> <c-d>
vnoremap <tab> >gv
vnoremap <s-tab> <gv

" folding on syntax mode
" set foldmethod=syntax
" autocmd BufWinEnter * silent! normal zn

" terminal window title to filename/etc
set title
