set encoding=utf-8

" Download VimPlug if required
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

" plugin management
call plug#begin('~/.local/share/nvim/plugged')
Plug 'airblade/vim-gitgutter'                        " Show changes in gutter
Plug 'ntpeters/vim-better-whitespace'                " Strip whitespace
Plug 'tpope/vim-repeat'                              " Allow repeat keystroke (.) to repeat plugin actions
Plug 'sheerun/vim-polyglot'                          " Language support
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' } " Fuzzy finder
Plug 'junegunn/fzf.vim'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-commentary'
Plug 'nanotech/jellybeans.vim'
call plug#end()

set termguicolors     " enable true colors support

colorscheme jellybeans
let g:jellybeans_use_gui_italics = 0

" Remove whitespace silently
let g:better_whitespace_enabled=0
let g:strip_whitespace_on_save=1
let g:strip_whitespace_confirm=0
let g:strip_max_file_size = 10000

syntax enable       " Enable syntax highlighting
set ruler           " Show file coordinates in statuslin
set hidden          " Allow multiple files open in one window.
set wildmenu        " Better command completion
set showcmd         " Current command feedback on last line of terminal
set mouse=a         " All mouse functionality
set history=200     " undo history
set laststatus=2    " Show status bar even when only one window
set cursorline      " Highlight currently selected line
set number          " line numbers inline
set nowrap          " don't soft wrap long lines
set timeoutlen=750  " ms wait before giving up on sequenced short
set updatetime=400  " Save file and refresh things like gitgutter after less inactivity, not 4000ms default
set confirm         " Ask to confirm actions like quit without saving etc

" Statusline {{{
  function! GitBranch()
    let branch = fugitive#statusline()
    if branch != ''
      let branch = substitute(branch, '\n', '', 'g')
      let branch = substitute(branch, 'Git', '', 'g')
      let branch = substitute(branch, '[', '', 'g')
      let branch = substitute(branch, ']', '', 'g')
      return branch
    en
    return ''
  endfunction
  set statusline=%f\ %r%m%w
  set statusline+=%=
  set statusline+=%l:%v
  set statusline+=\ %{GitBranch()}
" }}}

set list
set listchars=tab:>·
set listchars=eol:⏎,tab:>-,trail:⎵,space:·
set invlist

" windows
set splitbelow
set splitright

set backupdir=/tmp  " Leave .tmp files tidily away in /tmp
set directory=/tmp

" Better tabs
set tabstop=4                  " Show tabs as 2 characters wide
set softtabstop=2              " Use 2 spaces per indent
set shiftwidth=2               " Use 2 spaces per indent
set expandtab                  " Insert spaces for tabs
set autoindent                 " Newlines will start auto indented
set smartindent                " Be smart about indenting in c-like languages
set backspace=indent,eol,start " make backspace delete always not 'locked'

" Search
set ignorecase      " ignore case when searching etc
set smartcase       " don't ignore case when searching for uppercase characters
set hlsearch        " highlight last search results
set incsearch       " incremental search
set showmatch       " highlight matching parens
set mat=5           " Highlight matching parens for .5s

" Settings
:map Y y$         " Make Y yank to end of line

" use global (/g) option for substitution regexes as default
set gdefault

" Mnemonic Keybings with space leader
let mapleader = " "

" Edit vimrc quickly
augroup myvimrc
  au!
  au BufWritePost ~/.dotfiles/vim/vimrc.symlink source ~/.dotfiles/vim/vimrc.symlink
augroup END
" Edit vimrc
nmap <leader>.v :e ~/.dotfiles/vim/vimrc.symlink<CR>

" Terminal bindings
" This doesn't break fzf
augroup nvimfixes
  if has("nvim")
    au TermOpen * tnoremap <Esc> <c-\><c-n>
    au FileType fzf tunmap <Esc>
  endif
augroup END

" Easy escape to normal mode
inoremap jk <Esc>
cnoremap jk <Esc>

" Clear search results on hitting enter
nnoremap <silent> <CR> :noh<CR><CR>


" Toggles
" Show / Hide invisibles
:nmap <leader>ti :set invlist<CR>

" Diffs
" Git Diff Hunk Change Navigation
nmap <leader>dn <Plug>GitGutterNextHunk
nmap <leader>dp <Plug>GitGutterPrevHunk

nmap <leader>gd :tab sp \| Gdiff<CR>

" Buffer management
nmap <Leader>bd :bd<CR>
nmap <Leader>bn :bn<CR>
nmap <Leader>bp :bp<CR>
nmap <Leader>fs :w<CR>

" Navigation
" Move faster
nnoremap <Up> 4k
nnoremap <Down> 4j

" Window management
" Use SPC W as window command prefix
nmap <Leader>w <C-W>
nmap <Leader>tc :tabc<CR>
nmap <Leader>tn :tabn<CR>
nmap <Leader>tn :tabn<CR>
nmap <Leader>tp :tabp<CR>


" Fuzzy Finding
nmap <Leader>pf :GFiles<CR><Paste>
nmap <Leader>pF :Files<CR>
nmap <Leader>bb :Buffers<CR>
nmap <Leader>fr :History<CR>
nmap <Leader>ft :BTags<CR>
nmap <Leader>pt :Tags<CR>
nmap <Leader>fl :BLines<CR>
nmap <Leader>pl :Lines<CR>
nmap <Leader>pg :Rg<CR>
nmap <Leader>fc :BCommits<CR>
nmap <Leader>pc :Commits<CR>
command! ModifiedFiles call fzf#run(fzf#wrap({'source': 'git ls-files --exclude-standard --others --modified'}))
noremap <Leader>pm :ModifiedFiles<CR>
